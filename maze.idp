// First name: <your first name>
// Last name: <your last name>
// Student number: <your student number>
// Time estimate: <time_you_spent_on_this_project>

// DO NOT CHANGE THIS VOCABULARY
vocabulary V_maze_fixed{    
    type Direction constructed from {L, R, U, D}
    type X isa nat
    type Y isa nat
    type Pos constructed from { P(X, Y) }

    Wall(Pos) 		// Set of positions that are walls
    Entrance : Pos	// Entrance position - Represented with the blue color in visualization
    Exit : Pos		// Exit position - Represented with the green color in visualization
}

// STUDENT VOCABULARY
// You are allowed to change this vocabulary
vocabulary V_maze_student {
    extern vocabulary V_maze_fixed
    //Please give a short explanation of each type/predicate/function you introduce here.

    // This predicate indicates, if the given position is on the boundary of the maze
    Border(Pos)

    // This predictae indicates, if the two given positions are next to eachother
    // Positions one manhattan distance away are considered neighbours,
    // therefor diagonal elements are not considered neighbours.
    // A position is also not a neighbour with itself.
    // Illustration:
    //
    //      . X .
    //      X o X
    //      . X .
    //    
    NextTo(Pos, Pos)
    
    // This predicate indicates, if the two given positions are reachable through a path of walls.
    // Modified version of the reachability relation from page 75.
    ReachViaWalls(Pos, Pos)
    
    // This predicate indicates, if the two given positions are reachable through a path of empty cells.
    // Modified version of the reachability relation from page 75.
    ReachViaPath(Pos, Pos)

    // Extra Clarifications:
    // The assignment states that each empty cell needs to reachable from the Entrance.
    // It also states that an empty cell is either:
    //        - a non wall position 
    //        - the start position
    //        - the end position
    // This implies that the start position needs to be able to reach all of those positions 
    
    // Makes sure that groups of cells of the same type are not larger than the max island size. E.g. MaxIslandSize = 1: 2x2 cells consisting of only walls and 2x2 cells consisting of only empty cells are not allowed.
    MaxIslandSize : nat
}


// STUDENT THEORY
// Please fill in the theory
theory T_maze_studetn : V_maze_student {
    
    MaxIslandSize = 1 .

    // Defining Border(Pos):
    {
        ! x[X] y[Y]: Border(P(x,y)) <- x = MAX[:X].
        ! x[X] y[Y]: Border(P(x,y)) <- x = MIN[:X]. 
        ! x[X] y[Y]: Border(P(x,y)) <- y = MAX[:Y]. 
        ! x[X] y[Y]: Border(P(x,y)) <- y = MIN[:Y].
    }

    // Defining NextTo(Pos, Pos):
    // The neighbouring cells of a cells are the adjacent cells to the left, right,
    // top or bottom of that cell; diagonally adjacent cells are not considered neighbours.
    {
        ! x1[X] y1[Y] x2[X] y2[Y]: NextTo(P(x1,y1), P(x2,y2)) <- 
        ((x1-x2)=1 & (y1=y2)) |
        ((x2-x1)=1 & (y1=y2)) |
        ((x1=x2) & (y1-y2)=1) |
        ((x1=x2) & (y2-y1)=1).
    }
    
    // Defining ReachViaWalls(Pos, Pos)
    {
    	! p1[Pos] p2[Pos]: ReachViaWalls(p1, p2) <- NextTo(p1, p2) & Wall(p1) & Wall(p2).
        ! p1[Pos] p2[Pos]: ReachViaWalls(p1, p2) <- ? p3[Pos]: Wall(p3) & ReachViaWalls(p1, p3) & ReachViaWalls(p3, p2).
    }
    
    // Defining ReachViaPath(Pos, Pos)
    {
    	! p1[Pos] p2[Pos]: ReachViaPath(p1, p2) <- NextTo(p1, p2) & ~Wall(p1) & ~Wall(p2).
        ! p1[Pos] p2[Pos]: ReachViaPath(p1, p2) <- ? p3[Pos]: ~Wall(p3) & ReachViaPath(p1, p3) & ReachViaPath(p3, p2).
    }

    // Invariant:
    // From each inner wall, an outer wall can be reached through a connection of neighbouring
	// inner walls
    ! p[Pos]: ~Border(p) & Wall(p) => ?p1: Border(p1) & Wall(p1) & ReachViaWalls(p, p1).
    
    // Invariant:
    // Each empty cell can be reached from the entrance through a connection of neighbouring
	// empty cells
    ! p[Pos]: ~Border(p) & ~Wall(p) => ReachViaPath(p, Entrance).

    
    // Invariant:  The entrance is always positioned in the bottommost row (blue block in 
    // figures), second column.
    ! x[X] y[Y]: Entrance = P(x,y) => x = MIN[:X] + 1 & y = 0.

    // Invariant: The exit (green block in figures) is always positioned in the topmost row,
    // second-to-last column.
    ! x[X] y[Y]: Exit = P(x,y) => x = MAX[:X] - 1 & y = MAX[:Y].
    
    
    !xStart[X],yStart[Y] : 
    // One can span a box from (xStart, yStart) to 
    // (xStart + IslandSize, yStart + IslandSize)
    ((xStart + MaxIslandSize =< MAX[:X]) &
    (yStart + MaxIslandSize) =< MAX[:Y]) =>
    

    (
    // At least one wall should be found within this spanned box
    ? x[X] y[Y] :
    (x >= xStart & x =< xStart + MaxIslandSize) &
    (y >= yStart & y =< yStart + MaxIslandSize) &
    ~Wall(P(x,y))
    
    ) &
    (
    // At least one empty cell should be found within this spanned box
    ? x[X] y[Y] :
    (x >= xStart & x =< xStart + MaxIslandSize) &
    (y >= yStart & y =< yStart + MaxIslandSize) &
    Wall(P(x,y))
    ).

}

structure S : V_maze_student {
    X = { 0..3 }
    Y = { 0..3 }

    Entrance = P(1, 0)
    Exit = P(2, 3)
    
   
}

procedure main() {
    // You can use the following structure to check your solution:
    // Correct mazes: SC1, SC2, SC3, SC4, SC5, SC6, SC7
    // Incorrect mazes: SI1, SI2, SI3
    // Assignment Correct mazes: 
    // Assignment Incorrect mazes:

    // At the begining you can use structure S and try to generate a maze 
    model = onemodel(T_maze_studetn, SI3)
    if model then
        print(model)
        initVisualization()
        visualize(model)
    else
        print("Your theory is unsatisfiable!!!")
    end
}

include "tests/correct-mazes.idp"
include "tests/incorrect-mazes.idp"
include "tests/assignment-correct-mazes.idp"
include "tests/assignment-incorrect-mazes.idp"
include "visualize.idp"
